<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">



      <script type="text/javascript" src="https://cdn.sencha.com/ext/commercial/5.1.1/build/ext-all-debug.js"></script>
      <script type="text/javascript" src="https://cdn.sencha.com/ext/commercial/5.1.1/packages/ext-theme-crisp/build/ext-theme-crisp.js"></script>
      <link rel="stylesheet" href="https://cdn.sencha.com/ext/commercial/5.1.1/packages/ext-theme-crisp/build/resources/ext-theme-crisp-all-debug.css" />
      <script type="text/javascript" src="https://cdn.sencha.com/ext/commercial/5.1.1/packages/sencha-charts/build/sencha-charts-debug.js"></script>
      <link rel="stylesheet" href="https://cdn.sencha.com/ext/commercial/5.1.1/packages/sencha-charts/build/crisp/resources/sencha-charts-all-debug.css" />
      <script type="text/javascript" src="ux/RowExpanderGrid.js"></script>
      <script type="text/javascript" src="NestedGrid.js"></script>
      <script type="text/javascript" src="app.js"></script>

      <!--
          Stylesheets and Preprocessors
          ==============================

          You can always bring in CSS files manually with `<link>` tags, or asynchronously
          using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
          of Sails' conventional asset pipeline (boilerplate Gruntfile).

          By default, stylesheets from your `assets/linker/styles` folder are included
          here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
          are supported. In production, your styles will be minified and concatenated into
          a single file.

          To customize any part of the built-in behavior, just edit your Gruntfile.
          For example, here are a few things you could do:

              + Change the order of your CSS files
              + Import stylesheets from other directories
              + Use a different or additional preprocessor, like SASS, SCSS or Stylus
      -->

    <!--STYLES-->
    <!--STYLES END-->
  </head>

  <body>
    {{{body}}}



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, filesin your `assets/linker/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <!--SCRIPTS END-->
  </body>
</html>
